<?php
/*
08.[字符串转换整数 (atoi)]
请你来实现一个 atoi 函数，使其能将字符串转换成整数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；

假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：
    假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−2^31,  2^31 − 1]。
    如果数值超过这个范围，请返回  INT_MAX (2^31 − 1) 或 INT_MIN (−2^31) 。
示例 1:
    输入: "42"
    输出: 42
示例 2:
    输入: "   -42"
    输出: -42
    解释: 第一个非空白字符为 '-', 它是一个负号。
         我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:
    输入: "4193 with words"
    输出: 4193
    解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:
    输入: "words and 987"
    输出: 0
    解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
         因此无法执行有效的转换。
示例 5:
    输入: "-91283472332"
    输出: -2147483648
    解释: 数字 "-91283472332" 超过 32 位有符号整数范围。
         因此返回 INT_MIN (−231) 。


[思路]
- ① 丢弃开头无用空格，直到第一个非空字符
- ② 遇到第一个非空字符
    - 如果是 + 或者 -
        - 那么连通后面的数字，作为该整数的符号
    - 如果是 数字
        - 则直接将其与之后连续的数字字符组合起来，组成数字
- ③ 如果后面除了数字，还有其他字符
    - 直接舍弃
- ④ 如果不能进行转化
    - 如果都是字符串为空或字符串仅包含空白字符 直接返回 0
- ⑤ 如果越界
    - 那就给边界 INT_MAX (2^31 − 1) 或 INT_MIN (−2^31)
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/string-to-integer-atoi
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

class Solution {

    /**
     * @param String $str
     * @return Integer
     */
    function myAtoi($str) {
        $max = pow(2,31) - 1;
        $min = pow(-2,31);
        $str = trim($str); // 去除前后空白字符

        // 首字母 不是数字 也不是符号
        if( ($str[0] != '-' && $str[0] != '+') && !is_numeric($str[0])){
            return 0;
        }
        // 首字母 是数字   但是第二个字符不是数字
        if( ($str[0] == '-' || $str[0] == '+') && !is_numeric($str[1]) ){
            return 0;
        }
        // 标记正负号
        $flag = 1;
        if($str[0] == '-') {
            $flag = -1;
            $str  = ltrim($str,'-');
        }else{
            $str  = ltrim($str,'+');
        }
        $len = strlen($str);
        $res = 0; // 最终的整数
        for($i=0; $i<$len; $i++) {
            if(!is_numeric($str[$i]))  break;
            $res = $res*10 + (int)$str[$i]; // 逐位追加
        }
        $res = $flag * $res;
        if($res>$max) return $max;
        if($res<$min) return $min;
        return $res;
    }
}

$obj = new Solution();
$str = '-91283472332';
$res = $obj->myAtoi($str);
var_dump($res);
